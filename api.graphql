### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddressCompoundUniqueInput {
  district: District!
  name: String!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Building {
  district: District!
  id: Int!
  isResidential: Boolean!
  lastDateOfResidenceOfCases: DateTime
  name: String!
  relatedCases(after: CaseWhereUniqueInput, before: CaseWhereUniqueInput, first: Int, last: Int, orderBy: [CaseOrderByInput!], where: CaseWhereInput): [Case!]!
}

input BuildingFilter {
  every: BuildingWhereInput
  none: BuildingWhereInput
  some: BuildingWhereInput
}

input BuildingOrderByInput {
  district: SortOrder
  id: SortOrder
  isResidential: SortOrder
  lastDateOfResidenceOfCases: SortOrder
  name: SortOrder
  note: SortOrder
}

input BuildingWhereInput {
  AND: [BuildingWhereInput!]
  cases: CaseFilter
  district: District
  id: IntFilter
  isResidential: BooleanFilter
  lastDateOfResidenceOfCases: NullableDateTimeFilter
  name: StringFilter
  NOT: [BuildingWhereInput!]
  note: NullableStringFilter
  OR: [BuildingWhereInput!]
}

input BuildingWhereUniqueInput {
  address: AddressCompoundUniqueInput
  id: Int
}

type Case {
  admissionDate: DateTime
  age: Int!
  asymptomatic: Boolean
  buildings(after: BuildingWhereUniqueInput, before: BuildingWhereUniqueInput, first: Int, last: Int, where: BuildingWhereInput): [Building!]!
  classification: Classification!
  confirmed: Boolean!
  deceaseDate: DateTime
  dischargeDate: DateTime
  gender: Gender!
  id: Int!
  isHkResident: Boolean
  onsetDate: DateTime
  reportDate: DateTime!
  status: Status!
}

input CaseFilter {
  every: CaseWhereInput
  none: CaseWhereInput
  some: CaseWhereInput
}

input CaseOrderByInput {
  admissionDate: SortOrder
  age: SortOrder
  asymptomatic: SortOrder
  classification: SortOrder
  confirmed: SortOrder
  deceaseDate: SortOrder
  dischargeDate: SortOrder
  gender: SortOrder
  id: SortOrder
  isHkResident: SortOrder
  onsetDate: SortOrder
  reportDate: SortOrder
  status: SortOrder
}

input CaseWhereInput {
  admissionDate: NullableDateTimeFilter
  age: IntFilter
  AND: [CaseWhereInput!]
  asymptomatic: NullableBooleanFilter
  buildings: BuildingFilter
  classification: Classification
  clusters: ClusterFilter
  confirmed: BooleanFilter
  deceaseDate: NullableDateTimeFilter
  dischargeDate: NullableDateTimeFilter
  gender: Gender
  id: IntFilter
  isHkResident: NullableBooleanFilter
  NOT: [CaseWhereInput!]
  onsetDate: NullableDateTimeFilter
  OR: [CaseWhereInput!]
  reportDate: DateTimeFilter
  status: Status
}

input CaseWhereUniqueInput {
  id: Int
}

enum Classification {
  IMPORTED
  LINKED_WITH_IMPORTED
  LINKED_WITH_LOCAL
  LINKED_WITH_POSSIBLY_LOCAL
  LOCAL
  POSSIBLY_LOCAL
}

type Cluster {
  cases(after: CaseWhereUniqueInput, before: CaseWhereUniqueInput, first: Int, last: Int, orderBy: [CaseOrderByInput!], where: CaseWhereInput): [Case!]!
  id: Int!
  name: String!
}

input ClusterFilter {
  every: ClusterWhereInput
  none: ClusterWhereInput
  some: ClusterWhereInput
}

input ClusterOrderByInput {
  id: SortOrder
  name: SortOrder
}

input ClusterWhereInput {
  AND: [ClusterWhereInput!]
  cases: CaseFilter
  id: IntFilter
  name: StringFilter
  NOT: [ClusterWhereInput!]
  OR: [ClusterWhereInput!]
}

input ClusterWhereUniqueInput {
  id: Int
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum District {
  CENTRAL_AND_WESTERN
  EASTERN
  ISLANDS
  KOWLOON_CITY
  KWAI_TSING
  KWUN_TONG
  NA
  NORTH
  SAI_KUNG
  SHA_TIN
  SHAM_SHUI_PO
  SOUTHERN
  TAI_PO
  TSUEN_WAN
  TUEN_MUN
  WAN_CHAI
  WONG_TAI_SIN
  YAU_TSIM_MONG
  YUEN_LONG
}

enum Gender {
  FEMALE
  MALE
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  building(where: BuildingWhereUniqueInput!): Building
  buildings(after: BuildingWhereUniqueInput, before: BuildingWhereUniqueInput, first: Int, last: Int, orderBy: [BuildingOrderByInput!], where: BuildingWhereInput): [Building!]!
  case(where: CaseWhereUniqueInput!): Case
  cases(after: CaseWhereUniqueInput, before: CaseWhereUniqueInput, first: Int, last: Int, orderBy: [CaseOrderByInput!], where: CaseWhereInput): [Case!]!
  cluster(where: ClusterWhereUniqueInput!): Cluster
  clusters(after: ClusterWhereUniqueInput, before: ClusterWhereUniqueInput, first: Int, last: Int, orderBy: [ClusterOrderByInput!], where: ClusterWhereInput): [Cluster!]!
}

enum SortOrder {
  asc
  desc
}

enum Status {
  DECEASED
  DISCHARGED
  HOSPITALISED
  NO_ADMISSION
  PENDING_ADMISSION
  TO_BE_PROVIDED
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
